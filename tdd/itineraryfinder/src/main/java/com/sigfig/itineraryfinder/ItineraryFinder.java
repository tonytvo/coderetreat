package com.sigfig.itineraryfinder;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class ItineraryFinder {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new ItineraryFinder().getGreeting());
    }

    public Itinerary findItinerary(List<Flight> scheduledFlights, Airport sourceAirport, Airport destinationAirport) {
        if (scheduledFlights.isEmpty()) return new Itinerary(Collections.emptyList());

        // flights -> graph with vertices and edges
        // graph.getAllPaths(a -> b)
        // first path -> list of flights
        FlightGraph graph = FlightGraph.fromScheduledFlights(scheduledFlights, sourceAirport, destinationAirport);
        List<List<Airport>> allPaths = graph.getAllPaths(sourceAirport, destinationAirport);
        System.out.println("allPaths = " + allPaths);
        if (allPaths.isEmpty()) {
            return new Itinerary(Collections.emptyList());
        }
        return new Itinerary(getFlightsMatchPath(allPaths.get(0), scheduledFlights));
    }

    private List<Flight> getFlightsMatchPath(List<Airport> path, List<Flight> scheduledFlights) {
        Airport firstAirport = path.remove(0);
        Iterator<Airport> airportIterator = path.iterator();
        List<Flight> resultFlights = new ArrayList<>();
        while(airportIterator.hasNext()) {
            Airport secondAirport = airportIterator.next();
            Flight matchFlight = getMatchFlight(scheduledFlights, firstAirport, secondAirport);
            resultFlights.add(matchFlight);
            firstAirport = secondAirport;
        }
        return resultFlights;
    }

    private Flight getMatchFlight(List<Flight> scheduledFlights, Airport firstAirport, Airport secondAirport) {
        return scheduledFlights.stream()
                .filter( flight -> flight.destinationAirport == secondAirport && flight.sourceAirport == firstAirport)
                .collect(Collectors.toList()).get(0);
    }
}
